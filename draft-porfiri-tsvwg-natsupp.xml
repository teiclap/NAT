<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc SYSTEM "rfc2629-xhtml.ent">
<?rfc toc='yes'?>
<?rfc compact='yes'?>
<?rfc subcompact='no'?>

<rfc xmlns:xi="http://www.w3.org/2001/XInclude" xml:lang="en" ipr="trust200902" submissionType="IETF" consensus="true" category="std" docName="draft-porfiri-tsvwg-natsupp-00" version="3">

    <front>
        <title abbrev='SCTP NAT Support'>
Stream Control Transmission Protocol (SCTP) Network Address Translation Support
</title>
        <seriesInfo name="Internet-Draft" value="draft-porfiri-tsvwg-natsupp-00" />

        <!-- ************** RANDALL STEWART ***************-->
        <author initials='R. R.' surname='Stewart' fullname='Randall R. Stewart'>
            <organization>Netflix, Inc.</organization>
            <address>
                <postal>
                    <street></street>
                    <city>Chapin</city>
                    <region>SC</region>
                    <code>29036</code>
                    <country>US</country>
                </postal>
                <email>randall@lakerest.net</email>
            </address>
        </author>

        <!-- ************** MICHAEL TUEXEN *************** -->
        <author initials='M.' surname='Tüxen' fullname='Michael Tüxen'>
            <organization abbrev='Münster Univ. of Appl. Sciences'>
                  Münster University of Applied Sciences</organization>
            <address>
                <postal>
                    <street>Stegerwaldstrasse 39</street>
                    <city>48565 Steinfurt</city>
                    <country>DE</country>
                </postal>
                <email>tuexen@fh-muenster.de</email>
            </address>
        </author>

        <!-- *************** IRENE RUENGELER ***************** -->
        <author initials='I.' surname='Rüngeler' fullname='Irene Rüngeler'>
            <organization abbrev='Münster Univ. of Appl. Sciences'>
                  Münster University of Applied Sciences</organization>
            <address>
                <postal>
                    <street>Stegerwaldstrasse 39</street>
                    <city>48565 Steinfurt</city>
                    <country>DE</country>
                </postal>
                <email>i.ruengeler@fh-muenster.de</email>
            </address>
        </author>

        <!-- *************** CLAUDIO PORFIRI ***************** -->
        <author initials='C.' surname='Porfiri' fullname='Claudio Porfiri'>
            <organization abbrev='Ericsson AB'>
                  Ericsson AB</organization>
            <address>
                <postal>
                    <street>Torshamnsgatan 21</street>
                    <city>16440 Stockholm</city>
                    <country>SE</country>
                </postal>
                <email>claudio.porfiri@ericsson.com</email>
            </address>
        </author>

        <date />

        <keyword>Internet-Draft</keyword>

        <abstract>
            <t>The Stream Control Transmission Protocol (SCTP) provides a reliable
communications channel between two end-hosts in many ways similar to the
Transmission Control Protocol (TCP).
With the widespread deployment of Network Address Translators (NAT),
specialized code has been added to NAT functions for TCP that allows multiple
hosts to reside behind a NAT function and yet share a single IPv4 address,
even when two hosts (behind a NAT function) choose the same port numbers for
their connection.
This additional code is sometimes classified as Network Address and Port
Translation (NAPT).</t>
            <t>This document describes the protocol extensions needed for the SCTP
endpoints and the mechanisms for NAT functions necessary to provide similar
features of NAPT in the single point and multipoint traversal scenario.</t>
            <t>Finally, a YANG module for SCTP NAT is defined.</t>
        </abstract>
    </front>

    <middle>
        <section>
            <name>Introduction</name>
            <t>
                Stream Control Transmission Protocol (SCTP)
                <xref target='RFC4960' />
                provides a reliable communications channel between two end-hosts in many
ways similar to TCP
                <xref target='RFC0793' />
                . With the widespread
deployment of Network Address Translators (NAT), specialized code has been
added to NAT functions for TCP that allows multiple hosts to reside behind a NAT
function using private-use addresses (see
                <xref target='RFC6890' />
                ) and yet share
a single IPv4 address, even when two hosts (behind a NAT function) choose the
same port numbers for their connection.
This additional code is sometimes classified as Network Address and Port
Translation (NAPT).
Please note that this document focuses on the case where the NAT function maps a
single or multiple internal addresses to a single external address and vice versa.
            </t>
            <t>
                To date, specialized code for SCTP has not yet been
added to most NAT functions so that only a translation of IP addresses is
supported.
The end result of this is that only one SCTP-capable host can successfully
operate behind such a NAT function and this host can only be single-homed.
The only alternative for supporting legacy NAT functions is to use
UDP encapsulation as specified in
                <xref target='RFC6951' />
                .
            </t>
            <t>
                The NAT function in the document refers to NAPT functions described in
Section 2.2 of
                <xref target='RFC3022' />
                , NAT64
                <xref target='RFC6146' />
                ,
or DS-Lite AFTR
                <xref target='RFC6333' />
                .
            </t>
            <t>
                This document specifies procedures allowing a NAT function to support SCTP
by providing similar features to those provided by a NAPT for
TCP (see
                <xref target='RFC5382' />
                and
                <xref target='RFC7857' />
                ),
UDP (see
                <xref target='RFC4787' />
                and
                <xref target='RFC7857' />
                ),
and ICMP (see
                <xref target='RFC5508' />
                and
                <xref target='RFC7857' />
                ).
This document also specifies a set of data formats for SCTP packets and a set
of SCTP endpoint procedures to support NAT traversal.
An SCTP implementation supporting these procedures can assure that in both
single-homed and multi-homed cases a NAT function will maintain the appropriate
state without the NAT function needing to change port numbers.
            </t>
            <t>It is possible and desirable to make these changes for a number of
reasons:</t>
            <ul>
                <li>It is desirable for SCTP internal end-hosts on multiple platforms to be able
to share a NAT function's external IP address in the same way that a TCP session
can use a NAT function.</li>
                <li>
                    <t>If a NAT function does not need to change any data within an SCTP packet,
it will reduce the processing burden of NAT'ing SCTP by not needing to execute
the CRC32c checksum used by SCTP.</t>
                </li>
                <li>
                    <t>Not having to touch the IP payload makes the processing of ICMP
messages by NAT functions easier.</t>
                </li>
            </ul>
            <t>An SCTP-aware NAT function will need to follow these procedures for generating
appropriate SCTP packet formats.</t>
            <t>When considering SCTP-aware NAT it is possible to have
multiple levels of support. At each level, the Internal
Host, Remote Host, and NAT function does or does not support the
procedures described in this document. The following table
illustrates the results of the various combinations of
support and if communications can occur between two endpoints.</t>
            <table anchor="communication_table" align="center">
                <name>Communication possibilities</name>
                <thead>
                    <tr>
                        <th align="center">Internal Host</th>
                        <th align="center">NAT Function</th>
                        <th align="center">Remote Host</th>
                        <th align="center">Communication</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td align="center">Support      </td>
                        <td align="center">Support   </td>
                        <td align="center">Support      </td>
                        <td align="center">Yes          </td>
                    </tr>
                    <tr>
                        <td align="center">Support      </td>
                        <td align="center">Support   </td>
                        <td align="center">No Support   </td>
                        <td align="center">Limited      </td>
                    </tr>
                    <tr>
                        <td align="center">Support      </td>
                        <td align="center">No Support</td>
                        <td align="center">Support      </td>
                        <td align="center">None         </td>
                    </tr>
                    <tr>
                        <td align="center">Support      </td>
                        <td align="center">No Support</td>
                        <td align="center">No Support   </td>
                        <td align="center">None         </td>
                    </tr>
                    <tr>
                        <td align="center">No Support   </td>
                        <td align="center">Support   </td>
                        <td align="center">Support      </td>
                        <td align="center">Limited      </td>
                    </tr>
                    <tr>
                        <td align="center">No Support   </td>
                        <td align="center">Support   </td>
                        <td align="center">No Support   </td>
                        <td align="center">Limited      </td>
                    </tr>
                    <tr>
                        <td align="center">No Support   </td>
                        <td align="center">No Support</td>
                        <td align="center">Support      </td>
                        <td align="center">None         </td>
                    </tr>
                    <tr>
                        <td align="center">No Support   </td>
                        <td align="center">No Support</td>
                        <td align="center">No Support   </td>
                        <td align="center">None         </td>
                    </tr>
                </tbody>
            </table>
            <t>From the table it can be seen that no communication can occur when a
NAT function does not support SCTP-aware NAT.
This assumes that the NAT function does not handle SCTP packets at all and
all SCTP packets sent from behind a NAT function are discarded by
the NAT function.
In some cases, where the NAT function supports SCTP-aware NAT, but one of the
two hosts does not support the feature, communication can possibly occur in a
limited way.
For example, only one host can have a connection when a collision case occurs.</t>
        </section>

        <section anchor='conventions'>
            <name>Conventions</name>
            <t>
                The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14
                <xref target="RFC2119" />
                <xref target="RFC8174" />
                when,
and only when, they appear in all capitals, as shown here.
            </t>
        </section>

        <section anchor='terminology'>
            <name>Terminology</name>
            <t>
                This document uses the following terms, which are depicted in
                <xref target='terminology_fig' />
                . Familiarity with the terminology used in
                <xref target='RFC4960' />
                and
                <xref target='RFC5061' />
                is assumed.
            </t>
            <dl newline="true">
                <dt>Internal-Address (Int-Addr)</dt>
                <dd>
                    <t>An internal address that is known to the internal host.</t>
                </dd>
                <dt>Internal-Port (Int-Port)</dt>
                <dd>
                    <t>The port number that is in use by the host holding the
Internal-Address.</t>
                </dd>
                <dt>Internal-VTag (Int-VTag)</dt>
                <dd>
                    <t>
                        The SCTP Verification Tag (VTag) (see Section 3.1 of
                        <xref target='RFC4960' />
                        ) that the internal host has chosen for an
association.
The VTag is a unique 32-bit tag that accompanies any incoming SCTP packet
for this association to the Internal-Address. 
                    </t>
                </dd>
                <dt>Remote-Address (Rem-Addr)</dt>
                <dd>
                    <t>The address that an internal host is attempting to contact.</t>
                </dd>
                <dt>Remote-Port (Rem-Port)</dt>
                <dd>
                    <t>The port number used by the host holding the Remote-Address.</t>
                </dd>
                <dt>Remote-VTag (Rem-VTag)</dt>
                <dd>
                    <t>
                        The Verification Tag (VTag) (see Section 3.1 of
                        <xref target='RFC4960' />
                        )
that the host holding the Remote-Address has chosen for an association.
The VTag is a unique 32-bit tag that accompanies any outgoing
SCTP packet for this association to the Remote-Address. 
                    </t>
                </dd>
                <dt>External-Address (Ext-Addr)</dt>
                <dd>
                    <t>An external address assigned to the NAT function, that it uses as a source
address when sending packets towards a Remote-Address.</t>
                </dd>
            </dl>
            <figure anchor='terminology_fig'>
                <name>Basic Network Setup</name>
                <artwork align="center">
  Internal Network    |         External Network
                      |
           Internal   |   External              Remote
           Address    |   Address  /--\/--\    Address
+--------+         +-----+        /        \           +--------+
| Host A |=========| NAT |=======| Network  |==========| Host B |
+--------+         +-----+        \        /           +--------+
           Internal   |            \--/\--/     Remote
 Internal    Port     |                           Port   Remote
   VTag               |                                   VTag
</artwork>
            </figure>
        </section>

        <section>
            <name>Motivation and Overview</name>
            <section>
                <name>SCTP NAT Traversal Scenarios</name>
                <t>This section defines the notion of single and
multipoint NAT traversal. </t>
                <section anchor='single_point_traversal'>
                    <name>Single Point Traversal</name>

                    <t>
                        In this case, all packets in the SCTP association go through a
single NAT function, as shown in
                        <xref target='single_nat_scenario_fig' />
                        .
                    </t>
                    <figure anchor='single_nat_scenario_fig'>
                        <name>Single NAT Function Scenario</name>
                        <artwork align="center">
  Internal Network    |       External Network
                      |
                      |               /--\/--\
+--------+         +-----+           /        \          +--------+
| Host A |=========| NAT |========= | Network  | ========| Host B |
+--------+         +-----+           \        /          +--------+
                      |               \--/\--/
                      |
</artwork>
                    </figure>

                    <t>
                        A variation of this case is shown in
                        <xref target='serial_nat_szenario_fig' />
                        ,
i.e., multiple NAT functions in the forwarding path between two endpoints.
                    </t>
                    <figure anchor='serial_nat_szenario_fig'>
                        <name>Serial NAT Functions Scenario</name>
                        <artwork align="center">
      Internal | External : Internal | External
               |          :          |
               |          :          |       /--\/--\
+--------+  +-----+       :       +-----+   /        \   +--------+
| Host A |==| NAT |=======:=======| NAT |==| Network  |==| Host B |
+--------+  +-----+       :       +-----+   \        /   +--------+
               |          :          |       \--/\--/
               |          :          |
</artwork>
                    </figure>


                    <t>
                        Another case where the Endpoint is ditributed among SCTP Hosts is shown in
                        <xref target='distributed_endpoint_scenario_fig' /> where multiple Hosts
                        behave as Server and share the same Internal Port. A Load Balancer
                        node supports NAT when a new Association request comes.
                        .
                    </t>
                    <figure anchor='distributed_endpoint_scenario_fig'>
                        <name>Distributed Endpoint Scenario</name>
                        <artwork align="center">
  Internal Network    |       External Network
                      |
                      |               /--\/--\
+--------+         +-----+           /        \          +--------+
| Host A |====+====| NAT |========= | Network  | ========| Host B |
+--------+    |    +-----+           \        /          +--------+
              |       | \             \--/\--/
+--------+    |       |  \
| Host B |====+       |   \ 
+--------+    |       |    \
              |       |     +----------+
+--------+    |       |     | Load     |
| Host C |====+       |     | Balancer |
+--------+            |     +----------+

</artwork>
                    </figure>

                    
                    <t>Although one of the main benefits of SCTP multi-homing is redundant
paths, in the single point traversal scenario the NAT function represents
a single point of failure in the path of the SCTP multi-homed association.
However, the rest of the path can still benefit from path diversity provided
by SCTP multi-homing.</t>

                    <t>The two SCTP endpoints in this case can be either single-homed or
multi-homed. However, the important thing is that the NAT function
in this case sees all the packets of the SCTP association.</t>

                </section>

                <section anchor='multi_point_traversal'>
                    <name>Multipoint Traversal</name>
                    <t>
                        This case involves multiple NAT functions and each NAT function only sees some
of the packets in the SCTP association.
An example is shown in
                        <xref target='parallel_nat_scenario_fig' />
                        .
                    </t>
                    <figure anchor='parallel_nat_scenario_fig'>
                        <name>Parallel NAT Functions Scenario</name>
                        <artwork align="center">
         Internal      |      External
                    +------+             /---\/---\
            /=======|NAT A |=========\  /          \
+--------+ /        +------+          \/            \    +--------+
| Host A |/            |              |    Network   |===| Host B |
+--------+\            |              /\            /    +--------+
           \        +------+         /  \          /
            \=======|NAT B |========/    \---\/---/
                    +------+
                       |
</artwork>
                    </figure>
                    <t>This case does not apply to a single-homed SCTP association (i.e.,
both endpoints in the association use only one IP address). The
advantage here is that the existence of multiple NAT traversal points
can preserve the path diversity of a multi-homed association for the
entire path. This in turn can improve the robustness of the
communication.</t>
                </section>
            </section>

            <section>
                <name>Limitations of Classical NAPT for SCTP</name>
                <t>
                    Using classical NAPT possibly results in changing one of the SCTP port numbers
during the processing, which requires the recomputation of the transport layer
checksum by the NAPT function.
Whereas for UDP and TCP this can be done very efficiently, for SCTP
the checksum (CRC32c) over the entire packet needs to be recomputed
(see Appendix B of
                    <xref target='RFC4960' />
                    for details of the CRC32c
computation).
This would considerably add to the NAT computational burden, however hardware
support can mitigate this in some implementations.
                </t>
                <t>
                    An SCTP endpoint can have multiple addresses but only has a single port
number to use.
To make multipoint traversal work, all the NAT functions involved need to
recognize the packets they see as belonging to the same SCTP association and
perform port number translation in a consistent way.
One possible way of doing this is to use a pre-defined table of port numbers
and addresses configured within each NAT function.
Other mechanisms could make use of NAT to NAT communication.
Such mechanisms have not been deployed on a wide scale base and thus are not
a preferred solution.
Therefore an SCTP variant of NAT function has been developed
(see
                    <xref target='SCTP_aware_NAT' />
                    ).
                </t>
            </section>

            <section anchor='SCTP_aware_NAT'>
                <name>The SCTP-Specific Variant of NAT</name>
                <t>
                    In this section it is allowed that there are multiple SCTP capable hosts
behind a NAT function that share one External-Address.
This section focuses on the single point traversal scenario
(see
                    <xref target='single_point_traversal' />
                    ) as well as on the multipoint
trasversal NAT (see
                    <xref target='multi_point_traversal' />
                    ).
                </t>

                <t>The modification of outgoing SCTP packets sent from an internal host is
simple: the source address of the packets has to be replaced with the
External-Address. It might also be necessary to establish some
state in the NAT function to later handle incoming packets.</t>

                <t>
                    Typically, the NAT function has to maintain a NAT binding table
of Internal-Port, Remote-Port, Internal-Address, Remote-Address.
An entry in that NAT binding table is called a NAT-State control block.
The function Create() obtains the just mentioned parameters and returns
a NAT-State control block. Create() instantiates a supervision timer on
the NAT-State control block that has duration greather than 2 * HB.interval
and lower than 4 * HB.interval (see section 15 of
                    <xref target='RFC4960' />
                    ).
A NAT function MAY allow creating NAT-State control blocks via a management
interface.
                </t>

                <t>For SCTP packets coming from the external realm of the NAT function the
destination address of the packets has to be replaced with the Internal-Address
of the host to which the packet has to be delivered, if a NAT state entry is
found.
The lookup of the Internal-Address is based on the Remote-Address,
Remote-Port and the Internal-Port. The lookup function retarts the Nat-State control block
supervision timer.</t>

                <t>The entries in the NAT binding table need to fulfill some uniqueness
conditions.
There can not be more than one entry NAT binding table with the same 4-uple of
Internal-Address, Remote-Address, Internal-Port and Remote-Port.</t>

                <t>
                    NAT is able understanding that the SCTP packet transports an INIT chunk because
the SCTP common header will have VTAG=0 (see section 3.1 of
                    <xref target='RFC4960' />
                </t>

                <t>The processing of outgoing SCTP packets containing an INIT chunk
is illustrated in the following figure. This scenario is valid for all
message flows in this section.</t>
                <artwork align="center">
                    <![CDATA[
                                       /--\/--\
+--------+          +-----+           /        \           +--------+
| Host A | <------> | NAT | <------> | Network  | <------> | Host B |
+--------+          +-----+           \         /          +--------+
                                       \--/\---/


             INIT[Initiate-Tag]
 Int-Addr:Int-Port ------> Rem-Addr:Rem-Port
                  Rem-VTag=0

              if lookup(Int-Port, Rem-Port, Rem-Addr) == true
                     sendAbort(Rem-Addr, Rem-Port, Int-Addr, Int-Port, M-bit)
              else       
                     Create(Int-Port, Rem-Port, Int-Addr, Rem-Addr)
                     Returns(control block)
                     forwardPkt(Ext-Addr, Int-Port, Rem-Addr, Rem-Port)


           Translates To:

                        INIT[Initiate-Tag]
           Ext-Addr:Int-Port ------> Rem-Addr:Rem-Port
                            Rem-VTag=0
           
]]>
                </artwork>
                <t>Normally a NAT binding table entry will be created.</t>
                <t>
                    However, it is possible that there is already a NAT binding table entry with
the same Remote-Address, Internal-Port and Remote-Port but different Internal-Address.
In this case the packet containing the INIT chunk MUST be dropped by the NAT
and a packet containing an ABORT chunk SHOULD be sent to the SCTP host that
originated the packet with the M bit set and 'Port Number Collision'
error cause (see
                    <xref target='mbitabort' />
                    for the format).
The source address of the packet containing the ABORT chunk MUST be the
destination address of the packet containing the INIT chunk.
                </t>
                <t>The processing of outgoing SCTP packets containing chunks other than INIT
is described in the following figure.</t>
                <artwork align="center">
                    <![CDATA[
                                       /--\/--\
+--------+          +-----+           /        \           +--------+
| Host A | <------> | NAT | <------> | Network  | <------> | Host B |
+--------+          +-----+           \         /          +--------+
                                       \--/\---/

Int-Addr:Int-Port ------> Rem-Addr:Rem-Port
                  Rem-VTag

              if lookup(Int-Port, Rem-Port, Rem-Addr) == false
                     Create(Int-Port, Rem-Port, Int-Addr, Rem-Addr)
                     Returns(control block)                  
              forwardPkt(Ext-Addr, Int-Port, Rem-Addr, Rem-Port)

              Translates To:

                          Ext-Addr:Int-Port ------> Rem-Addr:Rem-Port
                                           Rem-VTag
]]>
                </artwork>

                <t>The processing of incoming SCTP packets containing an INIT chunk
is illustrated in the following figure. This scenario is valid for all
message flows in this section.</t>

                <artwork align="center">
                    <![CDATA[
                                       /--\/--\
+--------+          +-----+           /        \           +--------+
| Host A | <------> | NAT | <------> | Network  | <------> | Host B |
+--------+          +-----+           \         /          +--------+
                                       \--/\---/


                                         INIT [Initiate-Tag]
                            Ext-Addr:Int-Port <---- Rem-Addr:Rem-Port
                                             Int-VTag=0


              if lookup(Int-Port, Rem-Port, Rem-Addr) == true
                     sendAbort(Ext-Addr, Int-Port, Rem-Addr, Rem-Port, M-bit)
              else  
                     Create(Int-Port, Rem-Port, Int-Addr, Rem-Addr)
                     Returns(control block)
                     forwardPkt(Rem-Addr, Rem-Port, Int-Addr, Int-Port)


           Translates To:

                        INIT[Initiate-Tag]
           Int-Addr:Int-Port <------ Rem-Addr:Rem-Port
                            Int-VTag=0
           
]]>
                </artwork>

                <t>The processing of incoming SCTP packets containing chunk different
than INIT is illustrated in the following figure.
The Lookup() function has as input the Remote-Address,
Remote-Port and the Internal-Port.
It returns the corresponding entry of the NAT binding table.
</t>
                <artwork align="center">
                    <![CDATA[
                                       /--\/--\
+--------+          +-----+           /        \           +--------+
| Host A | <------> | NAT | <------> | Network  | <------> | Host B |
+--------+          +-----+           \         /          +--------+
                                       \--/\---/

                            Ext-Addr:Int-Port <---- Rem-Addr:Rem-Port
                                             Int-VTag

              if lookup(Int-Port, Rem-Port, Rem-Addr) == true
                     Returns(NAT-State control block containing Int-Addr)                  
                     forwardPkt(Ext-Addr, Int-Port, Rem-Addr, Rem-Port)

 Int-Addr:Int-Port <------ Rem-Addr:Rem-Port
                   Int-VTag
]]>
                </artwork>
                <t>In the case where the Lookup function fails because it does not find an
entry, the SCTP packet is dropped.</t>

            </section>
        </section>

        <section anchor='SCTP_data_format'>
            <name>Data Formats</name>
            <t>
                This section defines the formats used to support NAT traversal.
                <xref target='chunks' />
                and
                <xref target='errcause' />
                describe chunks
and error causes sent by NAT functions and received by SCTP endpoints.
                <xref target='newparam' />
                describes parameters sent by SCTP endpoints and
used by NAT functions and SCTP endpoints.
            </t>
            <section anchor='chunks'>
                <name>Modified Chunks</name>
                <t>
                    This section presents existing chunks defined in
                    <xref target='RFC4960' />
                    for which additional flags are specified by this document.
                </t>
                <section anchor='mbitabort'>
                    <name>Extended ABORT Chunk</name>
                    <artwork align="left">
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|   Type = 6    | Reserved  |M|T|           Length              |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
\                                                               \
/                   zero or more Error Causes                   /
\                                                               \
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</artwork>
                    <t>
                        The ABORT chunk is extended to add the new 'M bit'. The M bit
                        indicates to the receiver of the ABORT chunk that the chunk was not
                        generated by the peer SCTP endpoint, but instead by a middle box (e.g., NAT).
                    </t>
                    <t>[NOTE to RFC-Editor: Assignment of M bit to be confirmed by IANA.]</t>
                </section>

                <section anchor='mbiterr'>
                    <name>Extended ERROR Chunk</name>
                    <artwork align="left">
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|   Type = 9    | Reserved  |M|T|           Length              |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
\                                                               \
/                   zero or more Error Causes                   /
\                                                               \
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</artwork>
                    <t>
                        The ERROR chunk defined in
                        <xref target='RFC4960' />
                        is extended to
                        add the new 'M bit'. The M bit indicates to the receiver of the ERROR chunk
                        that the chunk was not generated by the peer SCTP endpoint, but instead
                        by a middle box.
                    </t>
                    <t>[NOTE to RFC-Editor: Assignment of M bit to be confirmed by IANA.]</t>
                </section>
            </section>
        </section>

        <section anchor='errcause'>
            <name>New Error Causes</name>
            <t>This section defines the new error causes added by this document.</t>

            <section anchor='portcollide'>
                <name>Port Number Collision Error Cause</name>
                <artwork align="left">
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|    Cause Code = 0x00B2        |     Cause Length = Variable   |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
\                             Chunk                            /
/                                                              \
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</artwork>
                <dl newline="true">
                    <dt>Cause Code: 2 bytes (unsigned integer)</dt>
                    <dd>
                        <t>
                            This field holds the IANA defined cause code for the
                            'Port Number Collision' Error Cause.
                            IANA is requested to assign the value 0x00B2 for this cause code.
                        </t>
                    </dd>
                    <dt>Cause Length: 2 bytes (unsigned integer)</dt>
                    <dd>
                        <t>
                            This field holds the length in bytes of the error cause.
                            The value MUST be the length of the Cause-Specific Information plus 4.
                        </t>
                    </dd>
                    <dt>Chunk: variable length</dt>
                    <dd>
                        <t>
                            The Cause-Specific Information is filled with the chunk that caused this
                            error.
                            This can be an INIT, INIT ACK, or ASCONF chunk.
                            Note that if the entire chunk will not fit in the ERROR chunk or ABORT chunk
                            being sent then the bytes that do not fit are truncated.</t>
                    </dd>
                </dl>
                <t>[NOTE to RFC-Editor: Assignment of cause code to be confirmed by IANA.]</t>
            </section>
            <section anchor='vtagnotfound'>
                <name>VTag Not Found Error Cause</name>
                <artwork align="left">
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|    Cause Code = 0x00B3        |     Cause Length = Variable   |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
\                             Chunk                            /
/                                                              \
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</artwork>
                <dl newline="true">
                    <dt>Cause Code: 2 bytes (unsigned integer)</dt>
                    <dd>
                        <t>
                            This field holds the IANA defined cause code for the
                            'Port Number Collision' Error Cause.
                            IANA is requested to assign the value 0x00B2 for this cause code.
                        </t>
                    </dd>
                    <dt>Cause Length: 2 bytes (unsigned integer)</dt>
                    <dd>
                        <t>
                            This field holds the length in bytes of the error cause.
                            The value MUST be the length of the Cause-Specific Information plus 4.
                        </t>
                    </dd>
                    <dt>Chunk: variable length</dt>
                    <dd>
                        <t>
                            The Cause-Specific Information is filled with the chunk that caused this
                            error.
                            This can be an INIT chunk.
                            Note that if the entire chunk will not fit in the ERROR chunk or ABORT chunk
                            being sent then the bytes that do not fit are truncated.</t>
                    </dd>
                </dl>
                <t>[NOTE to RFC-Editor: Assignment of cause code to be confirmed by IANA.]</t>
            </section>
        </section>

        <section anchor='newparam'>
            <name>New Parameters</name>
            <t>
                This section defines new parameters and their valid appearance
                defined by this document.
            </t>
            <section anchor='repetita_juvant'>
                <name>Repetita Juvant Parameter</name>
                <t>
                    The RJ parameter is used to indicate that INIT chunk is the repetition
                    of an already sent one even if it comes from a different source address.
                    It's used from either peers before sending ASCONF in order to setup the
                    NATs in the path.
                    This parameter holds the Internal as well as the Remote verification Tags
                    that will be used by the remote peer for validation.
                </t>
                <artwork align="left">
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|         Type = 0xXXXX         |         Length = 12           |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                   Internal Verification Tag                   |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                    Remote Verification Tag                    |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</artwork>
            </section>
        </section>

        <section>
            <name>Procedures for SCTP Endpoints and NAT Functions</name>
            <t>If an SCTP endpoint is behind an SCTP-aware NAT, a
                number of problems can arise as it tries to communicate with its peers:
            </t>
            <ul>
                <li>
                    <t>
                        IP addresses can not be included in the SCTP packet. This is
                        discussed in
                        <xref target='setup' />
                        .
                    </t>
                </li>
                <li>
                    <t>
                        More than one host behind a NAT function could select the same source
                        port number when initiating an association with the same peer server.
                        This creates a situation where the NAT function will not be able to forward 
                        the INIT chunk.
                        This situation is discussed in
                        <xref target='mbitport' />
                        .
                    </t>
                </li>
                <li>
                    <t>
                        A restart of a NAT function during a conversation could cause a loss of its state.
                        This problem and its solution is discussed in
                        <xref target='restart' />
                        .
                    </t>
                </li>
                <li>
                    <t>
                        NAT functions need to deal with SCTP packets being fragmented at the IP layer.
                        This is discussed in
                        <xref target='fragmentation' />
                        .
                    </t>
                </li>
                <li>
                    <t>
                        An SCTP endpoint can be behind two NAT functions in parallel providing
                        redundancy.
                        The method to set up this scenario is discussed in
                        <xref target='multihomed' />
                        .
                    </t>
                </li>
            </ul>
            <t>
                The mechanisms to solve these problems require additional chunks and
                parameters, defined in this document, and modified handling procedures
                from those specified in
                <xref target='RFC4960' />
                as described below.
            </t>

            <section anchor='setup'>
                <name>Association Setup Considerations for Endpoints</name>
                <t>
                    The association setup procedure defined in
                    <xref target='RFC4960' />
                    allows multi-homed SCTP endpoints to exchange its IP-addresses by using
                    IPv4 or IPv6 address parameters in the INIT and INIT ACK chunks.
                    However, this does not work when NAT functions are present.
                </t>
                <t>Every association setup from a host behind a NAT function MUST NOT use multiple
                    internal addresses.
                    The INIT chunk MUST NOT contain an IPv4 Address parameter,
                    IPv6 Address parameter, or Supported Address Types parameter.
                    The INIT ACK chunk MUST NOT contain any IPv4 Address parameter or
                    IPv6 Address parameter using non-global addresses.
                    The INIT chunk and the INIT ACK chunk MUST NOT contain any Host Name
                    parameters.
                </t>
                <t>
                    If the association is intended to be finally multi-homed, the procedure in
                    <xref target='multihomed' />
                    MUST be used.
                </t>

            </section>

            <section anchor='setup_nat'>
                <name>Association Setup Considerations for NAT</name>
                <t>
                    When Endpoint is Distributed, NAT needs the cooperation of a Load Balancer
                    function for handling incoming and outgoing Association Requests.
                    It's up to the Load Balancer internal design the strategy for permitting
                    a Distributed Endpoint to handle the traffic.
                    Functionally, it's important that Load Balancer provides NAT a way
                    way for assigning Associations to multiple SCTP Hosts and being able
                    recognizing whether an Association Request with RJ Option set belongs
                    to and existing Association and what SCTP Host is in charge for that.
                </t>
            </section>

            <section anchor='mbitport'>
                <name>Handling of Internal Port Number Collisions</name>
                <t>
                    Consider the case where two hosts in the Internal-Address space want to
                    set up an SCTP association with the same service provided by some remote hosts.
                    This means that the Remote-Port is the same.
                    If they both choose the same Internal-Port the NAT function will experience 
                    collision when receiving the INIT and trying to create an Entry in the NAT Tables.
                    In such case NAT will send an ABORT chunk with M-bit set to the SCTP Client.
                    Since it's up to the SCTP User Application to choose the Internal Port, it may
                    be that an Association chooses the Internal Port from the ephemeral port range at 
                    random (see
                    <xref target='RFC6056' />
                    ), this would make the probability for Port Number
                    Collision low.
                </t>

                <t>
                    At the Association initialization, the Client will experience one out of three
                    alternative answers from the network:
                </t>
                <ul>
                    <li>
                        <t> INIT-ACK from the peer, this means a viable path exists between peers, all 
                            the involved NATs have NAT tables properly configured and the Association can be established.</t>
                    </li>
                    <li>
                        <t>
                     ABORT with M-bit set from one of the NATs within the path, this means 
                     that one Association cannot be established. The SCTP User application
                     SHOULD decide whether to retry with a different Internal Port or to give up.
                     The way SCTP and the SCTP User interact in this case is implementation dependent.
              </t>
                    </li>
                    <li>
                        <t>
                     ABORT from the remote peer.
              </t>
                    </li>
                </ul>
                <t>
                    The way SCTP and SCTP User Application interact can be either:
                </t>
                <ul>
                    <li>
                        <t>An application can request a specific local port number (in the socket API, using bind() with 
                     a non-zero port number), ), and in case of a local port number collision, the connection 
                     setup has to fail. It is up to the application to close() the socket and restart from the beginning.
              </t>
                    </li>
                    <li>
                        <t>An application leaves the local port number selection up to the SCTP stack 
                     (in the socket socket API by either calling bind() with a zero port number 
                     or not calling bind() at all before calling connect() or sendto(). However, 
                     once the port number is chosen, it can not be changed. So in case of a local port number collision, 
                     the association setup has to fail. It is up to the application to close() the socket and restart 
                     from the beginning.
              </t>
                    </li>
                    <li>
                        <t>An application leaves the local port number selection up to the SCTP stack 
                     (in the socket socket API by either calling bind() with a zero port number 
                     or not calling bind() at all before calling connect() or sendto(). In addition, 
                     it indicates the the SCTP can change the local port number over time 
                     (in the socket API this would be calling an IPPROTO_SCTP level new socket option). 
                     In this case, the SCTP stack can automatically retry a connection setup 
                     in case of an local port number collision.
              </t>
                    </li>
                </ul>


                <section>
                    <name>NAT Function Considerations</name>
                    <t>
                        NAT function checks for collision only on packets containing INIT chunk.
                        If the NAT function detects a collision of internal port numbers, 
                        it SHOULD send a packet containing an ABORT chunk with the
                        M bit set.
                        The M bit is a new bit defined by this document to express to
                        SCTP that the source of this packet is a "middle" box, not the
                        peer SCTP endpoint (see
                        <xref target="mbitabort" />
                        ).
                        the source and destination address and port numbers MUST be swapped.
                    </t>
                    <t>
                        The sender of the packet containing an ERROR or ABORT chunk MUST include
                        the error cause with cause code 'Port Number Collision'
                        (see
                        <xref target="portcollide" />
                        ).
                    </t>
                    <t>
                        If the INIT chunk contains the RJ option and the Endpoint is Distributed,
                        NAT will involve the Load Balancer function for retrieving the Internal-Address 
                        of the SCTP Host handling the Association.
                        If the Load Balancer cannot relate the INIT chunk to an existing Association, 
                        NAT function  SHOULD send a packet containing an ABORT chunk with the
                        M bit set.
                        The M bit is a new bit defined by this document to express to
                        SCTP that the source of this packet is a "middle" box, not the
                        peer SCTP endpoint (see                        <xref target="mbitabort" />
                        ).
                        the source and destination address and port numbers MUST be swapped.
                    </t>
                        <t>
                            The sender of the packet containing an ERROR or ABORT chunk MUST include
                        the error cause with cause code 'VTag Not Found'
                        (see
                            <xref target="vtagnotfound" />
                            ).

                    </t>
                </section>

                <section>
                    <name>Endpoint Considerations</name>
                    <t>The sender of the packet containing the INIT chunk upon reception of a packet containing
                    an ABORT chunk with M bit set and the appropriate error cause code for
                    colliding NAT binding table state is included, SHOULD evaluate the reason for ABORT.
                    If the reason is "Port Number Collision" it SHOULD reinitiate the
                    association setup procedure after choosing a new Internal Port. If the reason is
                    "Vtag Not Found", the remote IP Address is to be considered not reacheable and 
                    a new attempt SHOULD be tried after a time that is grather than 4 * HB.interval.
                </t>

                </section>
            </section>

            <section anchor='restart'>
                <name>Handling of Missing State</name>
                <section>
                    <name>NAT Function Considerations</name>
                    <t>
                        When experiencing a restart, the NAT function will start handling SCTP
                        packets with time difference between the ones containing INIT chunks
                        and all the other ones.
                        Handling of SCTP packets containing INIT chunks will start at least
                        4 * HB.interval after handling other SCTP packets (see section 15 
                        of
                        <xref target='RFC4960' />
                        ). This avoids race condition between
                        the recreation of existing Entries in the NAT Table and the creation
                        of new ones from new Association requests.
                    </t>

                    <t>If the NAT function receives a packet not containing an INIT chunk from the internal network
                    for which the lookup procedure does not find an entry in the NAT binding table,
                    it must create an Entry for that packet and forward it.
                    If the NAT function receives a packet not containing an INIT chunk from the external network
                    for which the lookup procedure does not find an entry in the NAT binding table,
                    it must silently drop it.</t>
                </section>
                <section>
                    <name>Endpoint Considerations</name>
                    <t>Upon restart of a NAT function, the endpoint will experience connectivity
                    interruption, depending on the Association state it will keep on retrying
                    sending SCTP packets containint DATA chunks or HB chunks.
                    Since the longest interval between SCTP packets is HB.interval, it will be able
                    restoring the connectivity at most 2 * HB.interval after NAT function is back at work.
                    </t>
                    <t>If the Endpoint is trying to establish an Association, it will experience a longer
                    connectivity unavalilability of more than 4 * HB.interval as NAT needs to rebuild
                    the NAT Table with the existing Associations first. 
                    </t>
                </section>
            </section>

            <section anchor='fragmentation'>
                <name>Handling of Fragmented SCTP Packets by NAT Functions</name>
                <t>
                    SCTP minimizes the use of IP-level fragmentation. However, it
                    can happen that using IP-level fragmentation is needed to continue
                    an SCTP association. For example, if the path MTU is reduced and there
                    are still some DATA chunk in flight, which require packets larger than
                    the new path MTU. If IP-level fragmentation can not be used, the SCTP
                    association will be terminated in a non-graceful way.
                    See
                    <xref target="RFC8900" />
                    for more information about IP fragmentation.
                </t>
                <t>Therefore, a NAT function MUST be able to handle IP-level fragmented
                SCTP packets. The fragments MAY arrive in any order.</t>
                <t>When an SCTP packet can not be forwarded by the NAT function due to
                MTU issues and the IP header forbids fragmentation, the NAT MUST send back a
                "Fragmentation needed and DF set" ICMPv4 or PTB ICMPv6 message to the
                internal host.
                This allows for a faster recovery from this packet drop.</t>
            </section>

            <section anchor='multihomed'>
                <name>Multi Point Traversal Considerations for Endpoints</name>
                <t>If a multi-homed SCTP endpoint behind a NAT function connects to a peer,
                it MUST first set up the association single-homed with only one
                address causing the first NAT function to populate its state.</t>
                <t>
                    Once an Association has been created, it's possible to add further
                    IP addresses, but before adding each IP address it must be created
                    the needed set of Entries in all NAT functions towards all the peer's
                    IP addresses. An INIT chunk containing a RJ option (see
                    <xref target="repetita_juvant" />
                    )
                    SHOULD be sent towards all peers IP addresses.
                    The result from that INIT is according to the given rules for Association
                    setup (see
                    <xref target="setup" />
                    ) and can cause collision.
                    The reception of INIT ACK with the same VTAG as the existing Association
                    confirms that the path from the new IP address and the remote one is
                    available and that all the NATs involved are properly configured.
                </t>
                <t>After succefull confirmation, the Endpoint SHOULD add each IP address 
                    using packets containing ASCONF chunks sent via their respective NAT functions.
                    The address used in the Add IP address parameter is the wildcard address
                    (0.0.0.0 or ::0) and the address parameter in the ASCONF chunk SHOULD also
                    contain the VTags parameter.</t>
                <t>
                    When an Endpoint gets a new Remote IP Address added to an Association, it SHOULD
                    send INIT chunks with RJ option towards from all its own IP Addresses towards
                    that address in order to properly set all the NATs in the path.
                </t>
                <section>
                    <name>NAT Function Considerations</name>
                    <t>
                        NAT function will threat the INIT chunk containing a RJ option in the same
                        way as it does with INIT without RJ option. NAT doesn't differentiate between
                        paths and has no knowledge about the Association.
                        NAT function applies the same rules in case of collision (see
                        <xref target="mbitport" />
                        )
                    </t>
                </section>

                <section>
                    <name>Endpoint Considerations</name>
                    <t>
                        When the Endpoint receives an INIT chunk with RJ option set, it MUST check that the
                        included parameters Internal-Port, Remote-Port, Internal-VTag and Remote-VTag 
                        belong to an existing Association, in that case it MUST reply with INIT ACK specifying
                        the existing Remote-VTag, no other actions SHOULD be performed. If the parameters
                        are not identified, the Endpoint SHOULD reply with ABORT.
                    </t>
                    <t>
                        The Endpoint originating INIT chunk with RJ option set can receive different
                        answers:
                    </t>
                    <ul>
                        <li>
                            <t>
                                When receiving INIT ACK, it will check that the Remote-VTag is the
                                same as the Remote-VTag being used for the current Association. In
                                this case the path probing is complete, the NATs on the path are
                                properly set and the Endpoint can continue with the ASCONF procedure. 
                            </t>
                        </li>
                        <li>
                            <t>
                                When receiving as ABORT with M-bit set, it shall assume that a path
                                is not possible to be established. The Endpoint SHOULD retry after
                                a time greather than 4 * HB.interval.
                            </t>
                        </li>
                        <li>
                            <t>
                                When receiving an ABORT without M-bit set, it shall assume that some
                                temporary NAT configuration has led the INIT towards the wrong SCTP Host.
                                The Endpoint SHOULD retry after a time greather than 4 * HB.interval.
                            </t>
                        </li>
                        <li>
                            <t>
                                When receiving an INIT ACK with Remote-VTag different from the one
                                used in the current Association, it will send an ABORT message towards
                                the source IP address by specifying the Internal-VTag as well as the
                                Remote-VTag received and wait for ABORT procedure to be completed.
                                Then the Endpoint SHOULD retry after a time greather than 4 * HB.interval.
                            </t>
                        </li>
                    </ul>
                </section>


            </section>

        </section>
<section>
    <name>Examples of Operation</name>
    <t>
        This section describes examples of Association Establishements using
        the reference scenario depicted in
        <xref target='example_operation_fig'/>.
        Hosts A1 and A2 implement a distributed client towards the same remote Host. 
        Hosts B1 and B2 implement a distributed Endpoint 'B' acting as Server. 
        The Load Balancer functionality is not shown as it doesn't affect SCTP protocol.
    </t>
    <figure anchor='example_operation_fig'>
        <name>Parallel NAT with distributed endpoints Scenario</name>
        <artwork align="center">
          Internal      |               External             |       Internal
                     +------+                             +------+
                +====|NAT A |=====\    /---\/---\    /====|NAT C |====+
+---------+     |    +------+      \  /          \  /     +------+    |     +---------+
| Host A1 +-----+       |           \/            \/         |        +-----| Host B1 |
|         +--+  |       |           |   Network   |          |        |  +--+         |
+---------+  |  |       |           /\            /\         |        |  |  +---------+
             |  |    +------+      /  \          /  \     +------+    |  |
             +=======|NAT B |=====/    \---\/---/    \====|NAT D |=======+
             |  |    +------+                             +------+    |  |
+---------+  |  |       |                                    |        |  |  +---------+
| Host A2 +--|--+       |                                    |        +--|--+ Host B2 |
|         +--+          |                                    |           +--+         |
+---------+             |                                    |              +---------+
</artwork>
    </figure>
    <section anchor='sh_success_section'>
        <name>Single Homed Association Setup</name>
        <t>
            This section describes a successfull Association Establishment from A1 towards
            the distributed endpoint B.
            The sequence chart is shown in <xref target='sh_success_fig'/>.
        </t>
        <figure anchor='sh_success_fig'>
            <name>Single Homed successfull Association Setup</name>
            <artwork align="center">

    A1      A2      NAT A       NAT B       NAT C       NAT D       B1      B2
    |       |       |           |           |           |           |       |
    +--------------}| INIT      |           |           |           |       |
    |       |       +----------------------}|           |           |       |
    |       |       |           |           +----------------------}|       |
    |       |       |           |           |           |           |       |
    |       |       |           |           |{----------------------+       |
    |       |       |{----------------------+           |           |       |
    |{--------------+ INIT ACK  |           |           |           |       |
    |       |       |           |           |           |           |       |
            </artwork>
        </figure>
    </section>

    <section>
        <name>Single Homed Association Setup with Congestion</name>
        <t>
            This section describes a successfull Association Establishment from A2 towards
            the distributed endpoint B. The congestion happens at NAT A. 
            The sequence chart is shown in
            <xref target='sh_congest1_fig' />
            .
        </t>
        <figure anchor='sh_congest1_fig'>
            <name>Single Homed successfull Association Setup after congestion</name>
            <artwork align="center">

    A1      A2      NAT A       NAT B       NAT C       NAT D       B1      B2
    |       |       |           |           |           |           |       |
    |       +------}| INIT      |           |           |           |       |
    |       |{------+ ABORT     |           |           |           |       |
    |       |       |           |           |           |           |       |    
    |       +------}| INIT      |           |           |           |       |
    |       |       +----------------------}|           |           |       |
    |       |       |           |           +------------------------------}|
    |       |       |           |           |           |           |       |
    |       |       |           |           |{------------------------------+
    |       |       |{----------------------+           |           |       |
    |       {-------+ INIT ACK  |           |           |           |       |
    |       |       |           |           |           |           |       |
            </artwork>
        </figure>
    </section>

    <section anchor='mh_success_section'>
        <name>Multi Homed Association Setup</name>
        <t>
            This section describes how the single homed established at <xref target= 'sh_success_section'/>
            becomes multihomed. Success happens at all steps.
            <xref target='mh_success_fig' />
            .
        </t>
        <figure anchor='mh_success_fig'>
            <name>Multi Homed successfull Association Setup</name>
            <artwork align="center">

    A1      A2      NAT A       NAT B       NAT C       NAT D       B1      B2
    |       |       |           |           |           |           |       |
    +--------------------------}| INIT RJ   |           |           |       |
    |       |       |           +----------}|           |           |       |
    |       |       |           |           +----------------------}|       |
    |       |       |           |           |{----------------------+       |
    |       |       |           |{----------+           |           |       |
    |{--------------------------+ INIT ACK  |           |           |       |
    |       |       |           |           |           |           |       |
    +--------------------------}| ASCONF    |           |           |       |
    |       |       |           +----------}|           |           |       |
    |       |       |           |           +----------------------}|       |
    |       |       |           |           |{----------------------+       |
    |       |       |           |{----------+           |           |       |
    |{--------------------------+ ASCONF ACK|           |           |       |
    |       |       |           |           |           |           |       |
    |       |       |           | INIT RJ   |{----------------------+       |
    |       |       |           |{----------+           |           |       |
    |{--------------------------+           |           |           |       |
    +--------------------------}|           |           |           |       |
    |       |       |           +----------}|           |           |       |
    |       |       |           | INIT ACK  +----------------------}|       |
    |       |       |           |           |           |           |       |
    
            </artwork>
        </figure>
    </section>

    <section>
        <name>Multi Homed Association Setup</name>
        <t>
            This section describes how the multihome homed established at
            <xref target='mh_success_section' />
            becomes multihomed from the other peer. Success happens at all steps.
            <xref target='mhmh_success_fig' />
            .
        </t>
        <figure anchor='mhmh_success_fig'>
            <name>Multi Homed successfull Association Setup</name>
            <artwork align="center">

    A1      A2      NAT A       NAT B       NAT C       NAT D       B1      B2
    |       |       |           |           |           |           |       |
    |       |       |           | INIT RJ   |           |{----------+       |
    |       |       |{----------------------------------+           |       |
    |{--------------+           |           |           |           |       |
    +--------------}|           | INIT ACK  |           |           |       |
    |       |       +----------------------------------}|           |       |
    |       |       |           |           |           +----------}|       |
    |       |       |           | INIT RJ   |           |{----------+       |
    |       |       |           |{----------------------+           |       |
    |{--------------------------+           |           |           |       |
    +--------------------------}| INIT ACK  |           |           |       |
    |       |       |           +----------------------}|           |       |
    |       |       |           |           |           +----------}|       |
    |       |       |           |           |           |           |       |
    |       |       |           | ASCONF    |           |{----------+       |
    |       |       |{----------------------------------+           |       |
    |{--------------+           |           |           |           |       |
    +--------------}|           | ASCONF ACK|           |           |       |
    |       |       +----------------------------------}|           |       |
    |       |       |           |           |           +----------}|       |
    |       |       |           |           |           |           |       |   
    +--------------}|           | INIT RJ   |           |           |       |
    |       |       +----------------------------------}|           |       |
    |       |       |           |           |           +----------}|       |
    |       |       |           | INIT ACK  |           |{----------+       |
    |       |       |{----------------------------------+           |       |
    |{--------------+           |           |           |           |       |
    |       |       |           |           |           |           |       |
    +--------------------------}| INIT RJ   |           |           |       |    
    |       |       |           +----------------------}|           |       |
    |       |       |           |           |           +----------}|       |
    |       |       |           | INIT ACK  |           |{----------+       |
    |       |       |           |{----------------------+           |       |
    |{--------------------------+           |           |           |       |
    |       |       |           |           |           |           |       |

            </artwork>
        </figure>
    </section>

</section>
        <section>
            <name>IANA Considerations</name>
            <t>[NOTE to RFC-Editor: "RFCXXXX" is to be replaced by the RFC number you
assign this document.]</t>
            <t>[NOTE to RFC-Editor: The requested values for the chunk type and the chunk
parameter types are tentative and to be confirmed by IANA.]</t>
            <t>This document (RFCXXXX) is the reference for all registrations
described in this section.
The requested changes are described below.</t>

            <section>
                <name>New Chunk Flags for Two Existing Chunk Types</name>
                <t>
                    As defined in
                    <xref target='RFC6096' />
                    two chunk flags have to be assigned
by IANA for the ERROR chunk. The requested value for the T bit is 0x01 and
for the M bit is 0x02.
                </t>

                <t>This requires an update of the "ERROR Chunk Flags" registry for SCTP:</t>
                <t>ERROR Chunk Flags</t>
                <table>
                    <thead>
                        <tr>
                            <th>Chunk Flag Value</th>
                            <th>Chunk Flag Name</th>
                            <th>Reference</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>0x01</td>
                            <td>T bit     </td>
                            <td>[RFCXXXX]</td>
                        </tr>
                        <tr>
                            <td>0x02</td>
                            <td>M bit     </td>
                            <td>[RFCXXXX]</td>
                        </tr>
                        <tr>
                            <td>0x04</td>
                            <td>Unassigned</td>
                            <td></td>
                        </tr>
                        <tr>
                            <td>0x08</td>
                            <td>Unassigned</td>
                            <td></td>
                        </tr>
                        <tr>
                            <td>0x10</td>
                            <td>Unassigned</td>
                            <td></td>
                        </tr>
                        <tr>
                            <td>0x20</td>
                            <td>Unassigned</td>
                            <td></td>
                        </tr>
                        <tr>
                            <td>0x40</td>
                            <td>Unassigned</td>
                            <td></td>
                        </tr>
                        <tr>
                            <td>0x80</td>
                            <td>Unassigned</td>
                            <td></td>
                        </tr>
                    </tbody>
                </table>

                <t>
                    As defined in
                    <xref target='RFC6096' />
                    one chunk flag has to be assigned
by IANA for the ABORT chunk. The requested value of the M bit is 0x02.
                </t>
                <t>This requires an update of the "ABORT Chunk Flags" registry for SCTP:</t>
                <t>ABORT Chunk Flags</t>
                <table>
                    <thead>
                        <tr>
                            <th>Chunk Flag Value</th>
                            <th>Chunk Flag Name</th>
                            <th>Reference</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>0x01</td>
                            <td>T bit     </td>
                            <td>[RFC4960]</td>
                        </tr>
                        <tr>
                            <td>0x02</td>
                            <td>M bit     </td>
                            <td>[RFCXXXX]</td>
                        </tr>
                        <tr>
                            <td>0x04</td>
                            <td>Unassigned</td>
                            <td></td>
                        </tr>
                        <tr>
                            <td>0x08</td>
                            <td>Unassigned</td>
                            <td></td>
                        </tr>
                        <tr>
                            <td>0x10</td>
                            <td>Unassigned</td>
                            <td></td>
                        </tr>
                        <tr>
                            <td>0x20</td>
                            <td>Unassigned</td>
                            <td></td>
                        </tr>
                        <tr>
                            <td>0x40</td>
                            <td>Unassigned</td>
                            <td></td>
                        </tr>
                        <tr>
                            <td>0x80</td>
                            <td>Unassigned</td>
                            <td></td>
                        </tr>
                    </tbody>
                </table>
            </section>

            <section>
                <name>Four New Error Causes</name>
                <t>Four error causes have to be assigned by IANA.
It is requested to use the values given below.</t>
                <t>This requires Four additional lines in the "Error Cause Codes"
registry for SCTP:</t>
                <t>Error Cause Codes</t>
                <table>
                    <thead>
                        <tr>
                            <th>Value</th>
                            <th>Cause Code                    </th>
                            <th>Reference</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>176  </td>
                            <td>VTag and Port Number Collision</td>
                            <td>[RFCXXXX]</td>
                        </tr>
                        <tr>
                            <td>177  </td>
                            <td>Missing State                 </td>
                            <td>[RFCXXXX]</td>
                        </tr>
                        <tr>
                            <td>178  </td>
                            <td>Port Number Collision         </td>
                            <td>[RFCXXXX]</td>
                        </tr>
                        <tr>
                            <td>179  </td>
                            <td>VTag Not Found                </td>
                            <td>[RFCXXXX]</td>
                        </tr>
                    </tbody>
                </table>
            </section>

            <section>
                <name>Two New Chunk Parameter Types</name>
                <t>Two chunk parameter types have to be assigned by IANA.
IANA is requested to assign these values from the pool of parameters with the
upper two bits set to '11' and to use the values given below.</t>
                <t>This requires two additional lines in the "Chunk Parameter Types"
registry for SCTP:</t>
                <t>Chunk Parameter Types</t>
                <table>
                    <thead>
                        <tr>
                            <th>ID Value</th>
                            <th>Chunk Parameter Type    </th>
                            <th>Reference</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>49159   </td>
                            <td>Disable Restart (0xC007)</td>
                            <td>[RFCXXXX]</td>
                        </tr>
                        <tr>
                            <td>49160   </td>
                            <td>VTags (0xC008)          </td>
                            <td>[RFCXXXX]</td>
                        </tr>
                    </tbody>
                </table>
            </section>

        </section>

        <section>
            <name>Security Considerations</name>
            <t>State maintenance within a NAT function is always a subject of possible
Denial Of Service attacks. This document recommends that at
a minimum a NAT function runs a timer on any SCTP state so that old
association state can be cleaned up.</t>
            <t>
                Generic issues related to address sharing are discussed in
                <xref target='RFC6269' />
                and apply to SCTP as well.
            </t>
            <t>
                For SCTP endpoints not disabling the restart procedure, this document does
not add any additional security considerations to the ones given in
                <xref target="RFC4960" />
                ,
                <xref target="RFC4895" />
                , and
                <xref target="RFC5061" />
                .
            </t>
            <t>SCTP endpoints disabling the restart procedure, need to monitor the status
of all associations to mitigate resource exhaustion attacks by establishing
a lot of associations sharing the same IP addresses and port numbers.</t>
            <t>
                In any case, SCTP is protected by the verification tags and the usage of
                <xref target='RFC4895' />
                against off-path attackers.
            </t>
            <t>
                For IP-level fragmentation and reassembly related issues see
                <xref target="RFC4963" />
                .
            </t>
            <t>
                The YANG module specified in this document defines a schema for data that is
designed to be accessed via network management protocols such as
NETCONF
                <xref target="RFC6241" />
                or RESTCONF
                <xref target="RFC8040" />
                .
The lowest NETCONF layer is the secure transport layer, and the
mandatory-to-implement secure transport is
Secure Shell (SSH)
                <xref target="RFC6242" />
                .
The lowest RESTCONF layer is HTTPS, and the mandatory-to-implement secure
transport is TLS
                <xref target="RFC8446" />
                .
            </t>
            <t>
                The Network Configuration Access Control
Model (NACM)
                <xref target="RFC8341" />
                provides the means to restrict access for
particular NETCONF or RESTCONF users to a preconfigured subset of all
available NETCONF or RESTCONF protocol operations and content.
            </t>
            <t>All data nodes defined in the YANG module that can be created, modified,
and deleted (i.e., config true, which is the default) are considered sensitive.
Write operations (e.g., edit-config) applied to these data nodes without proper
protection can negatively affect network operations.
An attacker who is able to access the SCTP NAT function can undertake various
attacks, such as:</t>
            <ul>
                <li>
                    <t>Setting a low timeout for SCTP mapping entries to cause failures to deliver
incoming SCTP packets.</t>
                </li>
                <li>
                    <t>Instantiating mapping entries to cause NAT collision.</t>
                </li>
            </ul>
        </section>

    </middle>

    <back>
        <references>
            <name>Normative References</name>
            <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml" />
            <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4895.xml" />
            <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4960.xml" />
            <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5061.xml" />
            <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6096.xml" />
            <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml" />
        </references>
        <references>
            <name>Informative References</name>
            <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml-doi/reference.DOI.10.1145/1496091.1496095.xml" />
            <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0793.xml" />
            <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3022.xml" />
            <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4787.xml" />
            <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4963.xml" />
            <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5382.xml" />
            <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5508.xml" />
            <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6056.xml" />
            <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6146.xml" />
            <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6241.xml" />
            <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6242.xml" />
            <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6269.xml" />
            <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6333.xml" />
            <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6890.xml" />
            <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6951.xml" />
            <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7857.xml" />
            <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8040.xml" />
            <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8341.xml" />
            <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8446.xml" />
            <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8900.xml" />
        </references>
        <section numbered='false'>
            <name>Acknowledgments</name>
            <t>
                The authors wish to thank
                <contact fullname="Mohamed Boucadair" />
                ,
                <contact fullname="Gorry Fairhurst" />
                ,
                <contact fullname="Bryan Ford" />
                ,
                <contact fullname="David Hayes" />
                ,
                <contact fullname="Alfred Hines" />
                ,
                <contact fullname="Karen E. E. Nielsen" />
                ,
                <contact fullname="Henning Peters" />
                ,
                <contact fullname="Maksim Proshin" />
                ,
                <contact fullname="Timo Völker" />
                ,
                <contact fullname="Dan Wing" />
                ,
and
                <contact fullname="Qiaobing Xie" />
                for their invaluable comments.
            </t>
            <t>
                In addition, the authors wish to thank
                <contact fullname="David Hayes" />
                ,
                <contact fullname="Jason But" />
                ,
and
                <contact fullname="Grenville Armitage" />
                ,
the authors of
                <xref target='DOI_10.1145_1496091.1496095' />
                , for their suggestions.
            </t>
            <t>
                The authors also wish to thank
                <contact fullname="Mohamed Boucadair" />
                for
contributing the text related to the YANG module.
            </t>
        </section>

    </back>
</rfc>
